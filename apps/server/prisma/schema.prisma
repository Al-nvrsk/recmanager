// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  firstName   String
  secondName  String
  login       String      @unique
  avatar      String?
  password    String
  role        Role        @default(USER)
  theme       UserTheme?
  lang        UserLang?
  post        Reviews[]
  comments    Comments[]
  notifications Notifications[]
}



model UserTheme {
  id        String    @id @default(uuid())
  theme     String
  device    String?
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String    @unique
}

model UserLang {
  id        String  @id @default(uuid())
  lang      String
  owner     User    @relation(fields: [ownerId], references: [id])
  ownerId   String  @unique
}

enum Role {
  USER
  ADMIN
}

model Reviews {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  title         String
  avarageRating Float
  published     Boolean     @default(false)
  author        User        @relation(fields: [authorId], references: [id])
  authorId      String
  tag           Tags[]
  comments      Comments[]
  categories    Category[]
  authorRate    Int
  rating        ReviewRating?
  @@unique([title, authorId])
}

model Category {
  id String      @id @default(uuid())
  reviews Reviews @relation(fields: [reviewsId], references: [id])
  reviewsId String
  category String
}


model Tags {
  id      String   @id @default(uuid())
  tag     String
  post    Reviews @relation(fields: [postId], references: [id])
  postId  String
}

model Comments {
  id            String  @id @default(uuid())
  text          String
  reviews       Reviews @relation(fields: [reviewId], references: [id])
  reviewId      String
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  notification  Notifications?
}

model Notifications {
  id        String    @id @default(uuid())
  comments  Comments  @relation(fields: [commentId], references: [id])
  commentId String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model ReviewRating {
  id String    @id @default(uuid())
  rate Int
  userId String
  review Reviews @relation(fields: [reviewId], references: [id])
  reviewId String @unique
}
